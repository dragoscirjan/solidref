---
language: Python
code: python
birth: 1991
description: A widely-used high-level, interpreted, and general-purpose programming language. It prioritizes readability, allowing developers to express concepts in fewer lines of code than languages like C++ or Java.
principles:
  - title: Single Responsibility Principle (SRP)
    code: |
      # Bad example: A class handling both user data management and user notifications
      class User:
          def save_user_data(self):
              pass
          def send_notification(self):
              pass

      # Good example: Splitting responsibilities into separate classes
      class UserDataManager:
          def save_user_data(self):
              pass

      class UserNotification:
          def send_notification(self):
              pass

  - title: Open/Closed Principle (OCP)
    code: |
      # Bad example: Modifying existing code to add new functionality
      class Rectangle:
          def __init__(self, width, height):
              self.width = width
              self.height = height

          def compute_area(self):
              return self.width * self.height

      # Good example: Using abstraction to allow extension without modification
      class Shape:
          def compute_area(self):
              pass

      class Circle(Shape):
          def __init__(self, radius):
              self.radius = radius

          def compute_area(self):
              return 3.14 * self.radius * self.radius

  - title: Liskov Substitution Principle (LSP)
    code: |
      # Bad example: Derived class changes the behavior of the base class
      class Bird:
          def fly(self):
              pass

      class Ostrich(Bird):
          def fly(self):
              raise Exception("Can't fly")

      # Good example: Derived classes maintain the behavior of the base class
      class FlyingBird:
          def fly(self):
              pass

      class NonFlyingBird:
          def walk(self):
              pass

  - title: Interface Segregation Principle (ISP)
    code: |
      # Python doesn't have interfaces like some other languages, but the concept can be illustrated using abstract base classes (ABCs)
      from abc import ABC, abstractmethod

      # Bad example: A bulky interface
      class Worker(ABC):
          @abstractmethod
          def work(self):
              pass
          @abstractmethod
          def eat(self):
              pass

      # Good example: Segregated interfaces
      class Workable(ABC):
          @abstractmethod
          def work(self):
              pass

      class Eatable(ABC):
          @abstractmethod
          def eat(self):
              pass

  - title: Dependency Inversion Principle (DIP)
    code: |
      # Bad example: High-level module depending on a low-level module
      class LightBulb:
          def turn_on(self):
              pass

      class Switch:
          def __init__(self, bulb):
              self.bulb = bulb
          def operate(self):
              self.bulb.turn_on()

      # Good example: Both high-level and low-level modules depend on abstractions
      class Device(ABC):
          @abstractmethod
          def turn_on(self):
              pass

      class Fan(Device):
          def turn_on(self):
              pass

      class Switch:
          def __init__(self, device):
              self.device = device
          def operate(self):
              self.device.turn_on()

  - title: DRY (Don't Repeat Yourself)
    code: |
      # Bad example: Repeated logic
      def add_tax_for_food(price):
          return price + price * 0.05

      def add_tax_for_electronics(price):
          return price + price * 0.05

      # Good example: Single function for repeated logic
      def add_tax(price, rate=0.05):
          return price + price * rate

  - title: KISS (Keep It Simple, Stupid)
    code: |
      # Bad example: Overcomplicated way to check even numbers
      def is_even(num):
          return num % (2 if num > 0 else -2) == 0

      # Good example: Simplified approach
      def is_even(num):
          return num % 2 == 0

  - title: YAGNI (You Aren't Gonna Need It)
    code: |
      # Bad example: Adding unnecessary features
      class Car:
          def drive(self):
              pass
          def fly(self):
              pass  # Cars don't fly!

      # Good example: Only implement what's needed
      class Car:
          def drive(self):
              pass

  - title: Law of Demeter (Principle of Least Knowledge)
    code: |
      # Bad example: Accessing nested structures directly
      class Wallet:
          def __init__(self):
              self.money = 100.0

      class Person:
          def __init__(self):
              self.wallet = Wallet()

      def purchase(item_price, buyer):
          if buyer.wallet.money >= item_price:
              return True
          return False

      # Good example: Using encapsulation
      class Wallet:
          def __init__(self):
              self._money = 100.0
          def get_amount(self):
              return self._money

      class Person:
          def __init__(self):
              self.wallet = Wallet()
          def get_money_amount(self):
              return self.wallet.get_amount()

      def purchase(item_price, buyer):
          if buyer.get_money_amount() >= item_price:
              return True
          return False

  - title: Separation of Concerns
    code: |
      # Bad example: Mixing data retrieval and presentation
      class UserComponent:
          def fetch_user_data(self):
              pass
          def render(self):
              pass
          def calculate_age(self):
              pass

      # Good example: Separating concerns into different modules
      class UserDataService:
          def fetch_user_data(self):
              pass

      class UserLogic:
          def calculate_age(self):
              pass

      class UserComponent:
          def render(self):
              pass

  - title: The Zen of Python (PEP 20)
    description: A collection of guiding aphorisms for writing computer programs in Python. It emphasizes readability, simplicity, and clarity in code.
    code: |
      # The Zen of Python (PEP 20)
      import this
