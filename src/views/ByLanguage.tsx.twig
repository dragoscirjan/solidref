{% set header_value = '' %}
import React, {useEffect} from 'react';
import Page from '../components/Page';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import {useParams} from 'react-router-dom';
import {useRecoilState, useRecoilValueLoadable} from 'recoil';

import {LanguageHierarchyObject, languageObjectState} from '../state';
import {loadYamlByLanguage} from '../selector';
import CodeExampleAccordion from '../components/code/CodeExampleAccordion';
import {CenteredToolbar} from '../components/Header';
import Typography from '@mui/material/Typography';
import SvgIconByName from '../icons/SvgIconByName';
import { styled } from '@mui/material';

type Params = {
  language: string;
};

export type ByLanguageProps = {
  languageHierarchy?: LanguageHierarchyObject;
};

export const StyledSvgIconByName = styled(SvgIconByName)(({theme}) => ({
  width: '100px',
  height: '100px',
  transform: 'rotate(-15deg)',

  '&.GenericCodeIcon': {
    fill: theme.palette.primary.light,
  }
}));

function ByLanguage({languageHierarchy = {}}: ByLanguageProps) {
  const {language = 'javascript'} = useParams<Params>();

  const searchLanguage = `${language}`;
  const [languageObject, setLanguageObject] = useRecoilState(languageObjectState);
  const languageObjectLoadable = useRecoilValueLoadable(loadYamlByLanguage(searchLanguage));

  useEffect(() => {
    if (languageObjectLoadable.state === 'hasValue') {
      setLanguageObject({
        ...languageObject,
        ...languageObjectLoadable.contents,
      });
    }
  }, [languageObjectLoadable.state]);

  const makeKey = (key: string): string => {
    return key.replace(/[^\w]+/gi, '-').toLowerCase();
  };

  const renderCodeSamples = (id: string) => {
    if (!languageObject.ready) {
      return <>Loading ...</>;
    }

    const principle = languageObject?.languageObject?.principles?.find(({title}) => makeKey(title || '') === id);

    if (!principle) {
      return <>Missing information</>;
    }
    return <CodeExampleAccordion examples={principle?.examples || []} language={languageObject?.languageObject?.code || 'js'} />;
  };

  return (
    <>
      <CenteredToolbar sx={{'{{'}}justifyContent: 'space-between'{{'}}'}}>
          <Typography variant="h2">
            <i>{languageObject?.languageObject?.language}</i> Coding Principles
          </Typography>
          <Typography variant="h6">
            Here are the <i>{languageObject?.languageObject?.language}</i> Coding Principles explained
          </Typography>
          <StyledSvgIconByName name={languageObject?.languageObject?.code ?? ''} />
        </CenteredToolbar>
      <Page>
        <Box sx={{ '{{' }} flexGrow: 1 {{ '}}' }}>
          <Grid container spacing={2}>
          {% for principlesType in ast.content %}
            <Grid item xs={12}>
              <h2>{{ principlesType.subtitle }}</h2>
            </Grid>
            {% for principle in principlesType.principles %}
            {% set header_value = principle.name %}
            <Grid item xs={12} id={{ '{' }}'{{ node_id(header_value) }}-head'{{ '}' }}>
              <h3>{{header_value}}</h3>
            </Grid>

            <Grid item xs={12} id={{ '{' }}'{{ node_id(header_value) }}-desc'{{ '}' }}>
              <p>
                {{principle.description}}
              </p>
            </Grid>
            <Grid item xs={12} id={{ '{' }}'{{ node_id(header_value) }}-code'{{ '}' }}>
              {renderCodeSamples('{{ node_id(header_value) }}')}
            </Grid>
            {% endfor %}
          {% endfor %}
          </Grid>
        </Box>
      </Page>
    </>
  );
};

export default ByLanguage;
