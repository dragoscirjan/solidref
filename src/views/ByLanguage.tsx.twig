{% set header_value = '' %}
import React, {useEffect} from 'react';
import Page from '../components/Page';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import {useParams} from 'react-router-dom';
import {useRecoilState, useRecoilValueLoadable} from 'recoil';

import {LanguageHierarchyObject, languageObjectState} from '../state';
import {loadYamlByLanguage} from '../selector';
import SyntaxHighlighter from '../components/SyntaxHighlighter';

type Params = {
  language: string;
};

export type ByLanguageProps = {
  languageHierarchy?: LanguageHierarchyObject;
};

function ByLanguage({languageHierarchy = {}}: ByLanguageProps) {
  const {language = 'javascript'} = useParams<Params>();

  const searchLanguage = `${language}`;
  const [languageObject, setLanguageObject] = useRecoilState(languageObjectState);
  const languageObjectLoadable = useRecoilValueLoadable(loadYamlByLanguage(searchLanguage));

  useEffect(() => {
    if (languageObjectLoadable.state === 'hasValue') {
      setLanguageObject({
        ...languageObject,
        ...languageObjectLoadable.contents,
      });
    }
  }, [languageObjectLoadable.state]);

  const makeKey = (key: string): string => {
    return key.replace(/[^\w]+/gi, '-').toLowerCase();
  };

  const codeSample = (id: string) => {
    if (!languageObject.ready) {
      return <>Loading ...</>;
    }

    const principle = languageObject?.languageObject?.principles?.find(({title}) => makeKey(title || '') === id);

    if (!principle) {
      return <>Missing information</>;
    }
    return <SyntaxHighlighter code={principle?.code || ''} language={languageObject?.languageObject?.code || 'js'} />;
  };

  return (
    <Page>
      <Box sx={{ '{{' }} flexGrow: 1 {{ '}}' }}>
        <Grid item xs={{ '{' }}12{{ '}' }}>
          <h1>Coding principles under <i>{language}</i></h1>
        </Grid>
        <Grid container spacing={2}>
        {% for principlesType in ast.content %}
          <Grid item xs={12}>
            <h2>{{ principlesType.subtitle }}</h2>
          </Grid>
          {% for principle in principlesType.principles %}
          {% set header_value = principle.name %}
          <Grid item xs={12} id={{ '{' }}'{{ node_id(header_value) }}-head'{{ '}' }}>
            <h3>{{header_value}}</h3>
          </Grid>

          <Grid item xs={6} id={{ '{' }}'{{ node_id(header_value) }}-desc'{{ '}' }}>
            <p>
              {{principle.description}}
            </p>
          </Grid>
          <Grid item xs={6} id={{ '{' }}'{{ node_id(header_value) }}-code'{{ '}' }}>
            {codeSample('{{ node_id(header_value) }}')}
          </Grid>
          {% endfor %}
        {% endfor %}
        </Grid>
      </Box>
    </Page>
  );
};

export default ByLanguage;
